{"version":3,"file":"static/js/832.f6455a36.chunk.js","mappings":"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","sources":["components/App.styled.js","helper/API.jsx","components/MovieDetailsItem/MovieDetailsItem.jsx","pages/MoviesDetails.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\n\nexport const Link = styled(NavLink)`\n  padding: 10px 16px;\n  border-radius: 7px;\n  text-decoration: none;\n  color: black;\n  font-weight: 500;\n\n  &.active {\n    color: white;\n    background-color: green;\n  }\n`;\n\nexport const Nav = styled.nav`\n  display: flex;\n  width: fit-content;\n`;\n\nexport const Header = styled.header`\n  border-bottom: 1px solid #6c6969;\n    padding: 10px;\n`;\n\nexport const Container = styled.div`\n    margin-left: auto;\n    margin-right: auto;\n    padding-left: 15px;\n    padding-right: 15px;\n`;","const options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: `Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJmNzcwYjM3ZGRkNjNlMTZmYzFlMDNlNzM5ZmQyNWEzYSIsInN1YiI6IjY0NmY3ZGE5YzVhZGE1MDBjMWEyZDZiZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ctesgAjc_-Qsx83a0GTn0WKImJ26QG8RrQNVRwOmR7Q` \n  }\n};\n\n\nexport const fetchTraidingMovies = async () => {\n  try {\n    const response = await fetch('https://api.themoviedb.org/3/trending/movie/day?language=en-US', options);\n    return await response.json();\n  } catch (err) {\n    return console.error(err);\n  }\n};\n\nexport const fetchMovieByName = async (name) => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?query=${name}&include_adult=false&language=en-US&page=1`, options);\n    return await response.json();\n  } catch (err) {\n    return console.error(err);\n  }\n};\n\nexport const fetchMoviesDetails = async (id) => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${id}?language=en-US`, options)\n    return await response.json();\n  } catch (err) {\n    return console.error(err);\n  }\n}; \n\nexport const fetchMoviesCast = async (id) => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`, options)\n    return await response.json();\n  } catch (err) {\n    return console.error(err);\n  }\n};\n\nexport const fetchMoviesReviews = async (id) => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`, options)\n    return await response.json();\n  } catch (err) {\n    return console.error(err);\n  }\n};\n\n","\nconst MovieDetailsItem = ({ title, overview, genres, poster_path }) => {\n    \n    const baseUrl = 'https://image.tmdb.org/t/p/w500';\n    return (\n        <>\n            <img width='200px' src={`${baseUrl}${poster_path}`} alt={title} />\n            <h1>{title}</h1>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <p>{genres}</p>\n        </>\n    )\n};\n\nexport default MovieDetailsItem;","\nimport { Link, Outlet, useParams, useLocation } from \"react-router-dom\";\nimport { fetchMoviesDetails } from \"helper/API\";\nimport { useEffect, useState, useRef} from \"react\";\nimport MovieDetailsItem from \"components/MovieDetailsItem/MovieDetailsItem\";\nimport { Container } from \"components/App.styled\";\n\nconst MoviesDetails = () => {\n\n    \n    const  [film, setFilm]  = useState(null);\n    const { id } = useParams();\n    const location = useLocation();\n    const backLinkHref = useRef(location.state?.from ?? \"/movies\");\n    \n    useEffect(() => {\n        if (id || id !== '') {\n            fetchMoviesDetails(id)\n                .then(data => setFilm(data))\n                .catch(error => console.error(error))\n          };\n    }, [id]);\n\n\n    if (film) {\n        const { title, overview, genres, poster_path } = film;\n        let genresFull = null;\n        if (genres) {\n            genresFull = genres.map(el => el.name).join(', ');\n        };\n\n        return (\n            <main>\n                <Container>\n                    <Link to={backLinkHref.current}>GO TO BACK</Link>\n                    <MovieDetailsItem\n                        title={title}\n                        overview={overview}\n                        genres={genresFull}\n                        poster_path={poster_path}\n                    />\n                    <ul>\n                        <li><Link to='cast' >Cast</Link></li>\n                        <li><Link to='reviews' >Reviews</Link></li>\n                    </ul>\n                    <Outlet />\n                </Container >\n            </main>\n        );\n    };\n\n    \n};\n\nexport default MoviesDetails;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Link","styled","NavLink","Nav","Header","Container","options","method","headers","accept","Authorization","fetchTraidingMovies","fetch","response","json","console","error","fetchMovieByName","name","fetchMoviesDetails","id","fetchMoviesCast","fetchMoviesReviews","title","overview","genres","poster_path","width","src","alt","useState","film","setFilm","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","then","data","catch","genresFull","map","el","join","to","current","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}